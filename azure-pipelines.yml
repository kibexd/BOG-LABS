name: $(Build.BuildId)

trigger:
  branches:
    include:
      - Production

pr:
  branches:
    include:
      - main
      - Production
      - staging

variables:
  - name: 'AppVersion'
    value: '1.0.0.$(Build.BuildId)'
  - name: 'projectName'
    value: 'BOG_LABS'
  - name: 'publisher'
    value: 'Default_Publisher'
  - name: 'containerName'
    value: 'boglabs'
  - name: 'alcPath'
    value: 'C:\Users\nocki\Documents\BUSINESS CENTRAL ❕❗\BOG LABS\ALC\alc.exe'

pool:
  name: BOG

steps:
  - checkout: self
    clean: true

  - powershell: |
      $container = docker ps --filter "name=$(containerName)" --format "{{.Status}}"
      if ($container -match "Up") {
          Write-Host "Container '$(containerName)' is running"
      } else {
          Write-Host "##[error]Container '$(containerName)' not found or not running"
          exit 1
      }
    displayName: 'Verify Container Status'

  - powershell: |
      $appJsonPath = "$(Build.SourcesDirectory)\app.json"
      $appJson = Get-Content $appJsonPath | ConvertFrom-Json
      $appJson.version = "$(AppVersion)"
      $appJson | ConvertTo-Json -Depth 100 | Set-Content $appJsonPath
    displayName: 'Set App Version'

  - powershell: |
      Install-Module BcContainerHelper -Force
      Import-Module BcContainerHelper
      Write-Host "BcContainerHelper module installed and loaded."
    displayName: 'Install BcContainerHelper'

  - powershell: |
      $alcPath = "$(alcPath)"
      if (-Not (Test-Path $alcPath)) {
          Write-Host "##[error]ALC compiler not found at $alcPath"
          exit 1
      }
      Write-Host "ALC compiler found at $alcPath"
      & $alcPath /project:"$(Build.SourcesDirectory)" /packagecachepath:"$(Build.SourcesDirectory)\.alpackages" /out:"$(Build.ArtifactStagingDirectory)\$(projectName)_$(AppVersion).app"
    displayName: 'Compile AL App with ALC'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish AL App'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'ALApp'
      publishLocation: 'Container'

  - powershell: |
      Write-Host "=== Compilation Results ==="
      Get-ChildItem "$(Build.ArtifactStagingDirectory)" -Recurse
    displayName: 'Log Compilation Results'
    condition: always()

  - powershell: |
      echo "##vso[task.setvariable variable=docker_tag]$(Build.BuildId)"
    displayName: 'Set Docker Tag'

jobs:
- job: dockerBuildPush
  displayName: 'Docker Build and Push'
  pool:
    vmImage: 'ubuntu-latest'

  steps:
    - checkout: self

    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: 'ALApp'
        path: './app-package'

    - powershell: |
        docker login -u $(DOCKERHUB_USERNAME) -p $(DOCKERHUB_TOKEN)
        docker build -t $(DOCKERHUB_USERNAME)/bc-app:latest -t $(DOCKERHUB_USERNAME)/bc-app:$(docker_tag) .
        docker push $(DOCKERHUB_USERNAME)/bc-app:latest
        docker push $(DOCKERHUB_USERNAME)/bc-app:$(docker_tag)
      displayName: 'Build and Push Docker Image'
