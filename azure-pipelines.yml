# Pipeline name using the build ID
name: $(Build.BuildId)

# Define the variables used throughout the pipeline
variables:
- name: 'AppVersion'
  value: '1.0.0.0'  # Version of the application as per app.json
- name: 'projectName'
  value: 'BOG LABS'  # Project name as defined in app.json
- name: 'publisher'
  value: 'Default Publisher'  # Publisher name from app.json

# Specify which agent pool to use
pool:
  name: BOG  # Organization's agent pool

# Pipeline steps
steps:

# Step 1: Get the latest code
- checkout: self
  clean: true

# Step 2: Check if Docker Container is Already Running
- script: |
    if docker ps --format "{{.Names}}" | grep -q "boglabs"; then
      echo "##vso[task.setvariable variable=DOCKER_RUNNING]true"
    else
      echo "##vso[task.setvariable variable=DOCKER_RUNNING]false"
    fi
  displayName: 'Check if Docker Container is Running'

# Step 3: Create Docker Image (Only if container is NOT running)
- task: ALOpsDockerCreate@1
  displayName: 'Create Docker Image'
  condition: and(succeeded(), eq(variables['DOCKER_RUNNING'], 'false'))  # Skip if running
  inputs:
    artifacttype: OnPrem
    bcversion: '21.0'
    # licensefile: 'C:\Users\nocki\Documents\CORETEC ! ! !\MISC Files\BC 21 Coretec 5190554.flf'  # Commented out

# Step 4: Start Docker Container (Only if container is NOT running)
- task: ALOpsDockerStart@1
  displayName: 'Start Docker Container'
  condition: and(succeeded(), eq(variables['DOCKER_RUNNING'], 'false'))  # Skip if running

# Step 5: Wait for Docker Container (Uses Existing Container)
- task: ALOpsDockerWait@1
  displayName: 'Wait for Docker Container'
  inputs:
    containername: 'boglabs'  # Forces ALOps to wait for the correct container
    search_string: 'Ready for connections!'

# Step 6: Compile the AL application
- task: ALOpsAppCompiler@1
  displayName: 'Compile AL Application'
  inputs:
    usedocker: true
    artifactversion: '21.0'
    artifacttype: 'OnPrem'
    artifactcountry: 'w1'
    app_version: '1.0.0.0'
    app_filename: '$(publisher)_$(projectName)'
    publish_artifact: true
    failed_on_warnings: false

# Step 7: Publish the compiled app
- task: PublishBuildArtifacts@1
  displayName: 'Publish AL App'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'ALApp'
    publishLocation: 'Container'

# Step 8: Remove Docker Container (Only if it was started in this pipeline)
- task: ALOpsDockerRemove@1
  displayName: 'Remove Docker Container'
  condition: and(always(), eq(variables['DOCKER_RUNNING'], 'false'))  # Skip if already running
