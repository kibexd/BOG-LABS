name: $(Build.BuildId)

trigger:
  branches:
    include:
      - Production

pr:
  branches:
    include:
      - main
      - Production
      - staging

variables:
  - name: AppVersion
    value: 1.0.0.$(Build.BuildId)
  - name: projectName
    value: BOG_LABS
  - name: publisher
    value: Default_Publisher
  - name: containerName
    value: boglabs
  - name: alcPath
    value: C:\Users\nocki\Documents\BUSINESS CENTRAL ❕❗\BOG LABS\ALC\alc.exe
  - name: DOCKERHUB_USERNAME
    value: kibexd
  # Note: Define DOCKERHUB_TOKEN as a secret variable in Azure DevOps UI

jobs:
  - job: buildALApp
    displayName: Build AL Application
    pool:
      name: BOG

    steps:
      - checkout: self
        clean: true

      - powershell: |
          $container = docker ps --filter "name=$(containerName)" --format "{{.Status}}"
          if ($container -match "Up") {
              Write-Host "Container '$(containerName)' is running"
          } else {
              Write-Host "##[error]Container '$(containerName)' not found or not running"
              exit 1
          }
        displayName: Verify Container Status

      - powershell: |
          $appJsonPath = "$(Build.SourcesDirectory)\app.json"
          $appJson = Get-Content $appJsonPath | ConvertFrom-Json
          $appJson.version = "$(AppVersion)"
          $appJson | ConvertTo-Json -Depth 100 | Set-Content $appJsonPath
        displayName: Set App Version

      - powershell: |
          Install-Module BcContainerHelper -Force
          Import-Module BcContainerHelper
          Write-Host "BcContainerHelper module installed and loaded."
        displayName: Install BcContainerHelper

      - powershell: |
          $alcPath = "$(alcPath)"
          if (-Not (Test-Path $alcPath)) {
              Write-Host "##[error]ALC compiler not found at $alcPath"
              exit 1
          }
          Write-Host "ALC compiler found at $alcPath"
          & $alcPath /project:"$(Build.SourcesDirectory)" /packagecachepath:"$(Build.SourcesDirectory)\.alpackages" /out:"$(Build.ArtifactStagingDirectory)\$(projectName)_$(AppVersion).app"
        displayName: Compile AL App with ALC

      - task: PublishBuildArtifacts@1
        displayName: Publish AL App
        inputs:
          PathtoPublish: $(Build.ArtifactStagingDirectory)
          ArtifactName: ALApp
          publishLocation: Container

      - powershell: |
          Write-Host "=== Compilation Results ==="
          Get-ChildItem "$(Build.ArtifactStagingDirectory)" -Recurse
        displayName: Log Compilation Results
        condition: always()

      - powershell: |
          echo "##vso[task.setvariable variable=docker_tag;isOutput=true]$(Build.BuildId)"
        name: setVars
        displayName: Set Docker Tag

  - job: installAppToContainer
    displayName: Install App to Container
    dependsOn: buildALApp
    pool:
      name: BOG

    steps:
      - checkout: self

      - task: DownloadPipelineArtifact@2
        inputs:
          artifact: ALApp
          path: ./app-package

      - powershell: |
          # Verify app files
          Write-Host "=== App Package Files ==="
          Get-ChildItem -Path "./app-package" -Recurse
          
          # Install BcContainerHelper if needed
          if (-not (Get-Module -ListAvailable -Name BcContainerHelper)) {
              Install-Module BcContainerHelper -Force
          }
          Import-Module BcContainerHelper
          
          # Verify container is running
          $container = docker ps --filter "name=$(containerName)" --format "{{.Status}}"
          if ($container -match "Up") {
              Write-Host "Container '$(containerName)' is running"
          } else {
              Write-Host "##[error]Container '$(containerName)' not found or not running"
              exit 1
          }
          
          # Find the app file
          $appFile = Get-ChildItem -Path "./app-package" -Filter "*.app" | Select-Object -First 1 -ExpandProperty FullName
          if (-not $appFile) {
              Write-Host "##[error]No .app file found in the app-package directory"
              exit 1
          }
          
          Write-Host "Installing app: $appFile to container: $(containerName)"
          
          # Create credential for NavUserPassword authentication
          $password = 'P@ssw0rd'
          $securePassword = ConvertTo-SecureString -String $password -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ('admin', $securePassword)
          
          # Publish and install the app with credentials
          Publish-BcContainerApp `
              -containerName $(containerName) `
              -appFile $appFile `
              -skipVerification `
              -sync `
              -install `
              -credential $credential
          
          Write-Host "App installation complete!"
        displayName: 'Install App to Container'