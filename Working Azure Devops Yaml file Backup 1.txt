# ===================================================================
# BOG LABS Business Central App CI/CD Pipeline
# Created by Enock Kibe
# ===================================================================
#
# This pipeline showcases Enock Kibe's elegant solution for automating 
# Business Central app deployment. Instead of the traditional approach 
# of building Docker images with pre-installed apps, he implemented a 
# streamlined process that directly publishes apps to a running container - 
# saving time and reducing complexity.
#
# The most brilliant part is the final installation step that treats the 
# container as a service rather than a disposable resource. This approach 
# is like upgrading the engine of a car while it's still running - a 
# sophisticated technique that requires deep understanding of both 
# Business Central and Azure DevOps pipelines.
# ===================================================================

# Dynamic build numbering - each run gets a unique ID
name: $(Build.BuildId)

# =========================== TRIGGER SETUP ===========================
# Trigger the pipeline only when commits are pushed to Production branch
trigger:
  branches:
    include:
      - Production

# Run pipeline checks on pull requests to these branches
pr:
  branches:
    include:
      - main
      - Production
      - staging

# =========================== VARIABLES ===========================
# Define global variables used throughout the pipeline
variables:
  # App version format: 1.0.0.BuildId (automatically increments with each build)
  - name: AppVersion
    value: 1.0.0.$(Build.BuildId)
  # Name of the AL project
  - name: projectName
    value: BOG_LABS
  # Publisher for the app manifest
  - name: publisher
    value: Default_Publisher
  # Name of the Docker container running Business Central
  - name: containerName
    value: boglabs
  # Path to the AL compiler on the build agent
  - name: alcPath
    value: C:\Users\nocki\Documents\BUSINESS CENTRAL ❕❗\BOG LABS\ALC\alc.exe
  # Docker Hub username (for potential future use)
  - name: DOCKERHUB_USERNAME
    value: kibexd
  # Note: Secret variables should be defined in Azure DevOps UI, not here

# =========================== BUILD & DEPLOY JOBS ===========================
jobs:
  # **************** JOB 1: BUILD THE AL APPLICATION ****************
  # This job compiles the AL source code into a deployable Business Central app package
  - job: buildALApp
    displayName: Build AL Application
    pool:
      name: BOG  # Custom agent pool running on Enock's infrastructure

    steps:
      # Get the latest source code
      - checkout: self
        clean: true  # Start with a clean workspace (like wiping the workbench before starting)

      # IMPORTANT: Verify the Business Central container is running
      # This is a crucial check to ensure the development environment is available
      - powershell: |
          $container = docker ps --filter "name=$(containerName)" --format "{{.Status}}"
          if ($container -match "Up") {
              Write-Host "Container '$(containerName)' is running"
          } else {
              Write-Host "##[error]Container '$(containerName)' not found or not running"
              exit 1
          }
        displayName: Verify Container Status

      # Update version in app.json to ensure proper incremental versioning
      - powershell: |
          $appJsonPath = "$(Build.SourcesDirectory)\app.json"
          $appJson = Get-Content $appJsonPath | ConvertFrom-Json
          $appJson.version = "$(AppVersion)"
          $appJson | ConvertTo-Json -Depth 100 | Set-Content $appJsonPath
        displayName: Set App Version

      # IMPORTANT: Install BcContainerHelper - the Swiss Army knife for BC operations
      # This module provides all the specialized cmdlets needed for BC app management
      - powershell: |
          Install-Module BcContainerHelper -Force
          Import-Module BcContainerHelper
          Write-Host "BcContainerHelper module installed and loaded."
        displayName: Install BcContainerHelper

      # CRITICAL: Compile AL code into deployable app package
      # This is where Enock's raw code becomes a ready-to-deploy Business Central extension
      - powershell: |
          $alcPath = "$(alcPath)"
          if (-Not (Test-Path $alcPath)) {
              Write-Host "##[error]ALC compiler not found at $alcPath"
              exit 1
          }
          Write-Host "ALC compiler found at $alcPath"
          & $alcPath /project:"$(Build.SourcesDirectory)" /packagecachepath:"$(Build.SourcesDirectory)\.alpackages" /out:"$(Build.ArtifactStagingDirectory)\$(projectName)_$(AppVersion).app"
        displayName: Compile AL App with ALC

      # Publish the compiled app as a build artifact for the next job
      - task: PublishBuildArtifacts@1
        displayName: Publish AL App
        inputs:
          PathtoPublish: $(Build.ArtifactStagingDirectory)
          ArtifactName: ALApp
          publishLocation: Container

      # Log the compilation results for transparency and debugging
      - powershell: |
          Write-Host "=== Compilation Results ==="
          Get-ChildItem "$(Build.ArtifactStagingDirectory)" -Recurse
        displayName: Log Compilation Results
        condition: always()  # Always run this step, even if previous steps fail

      # Store build ID for potential future container tagging
      - powershell: |
          echo "##vso[task.setvariable variable=docker_tag;isOutput=true]$(Build.BuildId)"
        name: setVars
        displayName: Set Docker Tag

  # **************** JOB 2: DEPLOY TO BUSINESS CENTRAL ****************
  # This ingenious job installs the app directly to a running container
  # Instead of rebuilding a container image, Enock's approach treats
  # the container as a service, saving significant time and resources
  - job: installAppToContainer
    displayName: Install App to Container
    dependsOn: buildALApp  # Sequential dependency - build first, then deploy
    pool:
      name: BOG

    steps:
      # Get source code (needed for scripts)
      - checkout: self

      # Download the compiled app from the previous job
      - task: DownloadPipelineArtifact@2
        inputs:
          artifact: ALApp
          path: ./app-package

      # MASTERSTROKE: Direct installation to running container
      - powershell: |
          # Verify app files
          Write-Host "=== App Package Files ==="
          Get-ChildItem -Path "./app-package" -Recurse
          
          # Install BcContainerHelper if needed
          if (-not (Get-Module -ListAvailable -Name BcContainerHelper)) {
              Install-Module BcContainerHelper -Force
          }
          Import-Module BcContainerHelper
          
          # Double-check container is running before attempting installation
          $container = docker ps --filter "name=$(containerName)" --format "{{.Status}}"
          if ($container -match "Up") {
              Write-Host "Container '$(containerName)' is running"
          } else {
              Write-Host "##[error]Container '$(containerName)' not found or not running"
              exit 1
          }
          
          # Find the app file to install
          $appFile = Get-ChildItem -Path "./app-package" -Filter "*.app" | Select-Object -First 1 -ExpandProperty FullName
          if (-not $appFile) {
              Write-Host "##[error]No .app file found in the app-package directory"
              exit 1
          }
          
          Write-Host "Installing app: $appFile to container: $(containerName)"
          
          # Create credential for NavUserPassword authentication
          $password = 'P@ssw0rd'
          $securePassword = ConvertTo-SecureString -String $password -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ('admin', $securePassword)
          
          try {
              # Get info about all apps in the container
              $existingApps = Get-BcContainerAppInfo -containerName $(containerName) -tenantSpecificProperties
              
              # Get app name and publisher
              $appName = "BOG LABS"
              $publisher = "Microsoft"
              
              Write-Host "Looking for existing installations of $appName by $publisher"
              
              # Get installed apps matching our app name and publisher
              $installedApps = $existingApps | Where-Object { $_.Name -eq $appName -and $_.Publisher -eq $publisher }
              
              # Get app info from the current app file
              Write-Host "Getting app info from $appFile..."
              $appFileName = Split-Path $appFile -Leaf
              $newAppVersion = ([regex]::Match($appFileName, '\d+\.\d+\.\d+\.\d+').Value)
              Write-Host "New app version: $newAppVersion"
              
              if ($installedApps) {
                  # Save the oldest version for data upgrade
                  $oldestApp = $installedApps | Sort-Object Version | Select-Object -First 1
                  Write-Host "Oldest installed version is $($oldestApp.Version), will use for data upgrade reference"
                  
                  foreach ($app in $installedApps) {
                      Write-Host "Found installed app: $($app.Name) $($app.Version) by $($app.Publisher)"
                      
                      # Uninstall the app
                      Write-Host "Uninstalling $($app.Name) $($app.Version)..."
                      Uninstall-BcContainerApp `
                          -containerName $(containerName) `
                          -name $app.Name `
                          -publisher $app.Publisher `
                          -version $app.Version `
                          -force
                  }
                  
                  # Get all published apps (including those not installed)
                  $publishedApps = Get-BcContainerAppInfo -containerName $(containerName) -publishedOnly | 
                                  Where-Object { $_.Name -eq $appName -and $_.Publisher -eq $publisher }
                  
                  # Unpublish all versions
                  foreach ($app in $publishedApps) {
                      Write-Host "Unpublishing $($app.Name) $($app.Version) by $($app.Publisher)..."
                      Unpublish-BcContainerApp `
                          -containerName $(containerName) `
                          -name $app.Name `
                          -publisher $app.Publisher `
                          -version $app.Version
                  }
              } else {
                  Write-Host "No existing installations found for $appName by $publisher"
              }
              
              # Now publish and install the new version
              Write-Host "Publishing new app version..."
              Publish-BcContainerApp `
                  -containerName $(containerName) `
                  -appFile $appFile `
                  -skipVerification `
                  -sync
              
              # Skip the data upgrade step for first-time installs
              if ($installedApps) {
                  # Check the parameters for Start-BcContainerAppDataUpgrade
                  $dataUpgradeCmdInfo = Get-Command Start-BcContainerAppDataUpgrade
                  Write-Host "Start-BcContainerAppDataUpgrade parameters: $($dataUpgradeCmdInfo.Parameters.Keys -join ', ')"
                  
                  # Run data upgrade if we're upgrading from a previous version
                  Write-Host "Running data upgrade to version $newAppVersion..."
                  Start-BcContainerAppDataUpgrade `
                      -containerName $(containerName) `
                      -appName $appName `
                      -appVersion $newAppVersion
              }
              
              # Check parameters for Install-BcContainerApp
              $installCmdInfo = Get-Command Install-BcContainerApp
              Write-Host "Install-BcContainerApp parameters: $($installCmdInfo.Parameters.Keys -join ', ')"
              
              # Finally install the app - use correct parameter names
              Write-Host "Installing app version $newAppVersion..."
              Install-BcContainerApp `
                  -containerName $(containerName) `
                  -appName $appName `
                  -appPublisher $publisher `
                  -appVersion $newAppVersion
              
              Write-Host "App upgrade/installation complete!"
          }
          catch {
              Write-Host "##[error]Error during app installation: $_"
              Write-Host $_.ScriptStackTrace
              throw
          }
        displayName: 'Install App to Container'

The key was identifying the correct parameters for each cmdlet in this BcContainerHelper version.
My pipeline now handles a clean upgrade process:
Building the AL app with incremental versioning
Uninstalling existing versions
Unpublishing old versions
Publishing new version
Data upgrade
Installation
This approach is much more efficient than rebuilding Docker images each time, and provides a smoother continuous integration workflow for my Business Central development.